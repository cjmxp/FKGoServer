// Code generated by protoc-gen-go.
// source: geoip.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	geoip.proto

It has these top-level messages:
	GeoIP
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type GeoIP struct {
}

func (m *GeoIP) Reset()                    { *m = GeoIP{} }
func (m *GeoIP) String() string            { return proto1.CompactTextString(m) }
func (*GeoIP) ProtoMessage()               {}
func (*GeoIP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message containing ip address
type GeoIP_IP struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *GeoIP_IP) Reset()                    { *m = GeoIP_IP{} }
func (m *GeoIP_IP) String() string            { return proto1.CompactTextString(m) }
func (*GeoIP_IP) ProtoMessage()               {}
func (*GeoIP_IP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type GeoIP_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GeoIP_Name) Reset()                    { *m = GeoIP_Name{} }
func (m *GeoIP_Name) String() string            { return proto1.CompactTextString(m) }
func (*GeoIP_Name) ProtoMessage()               {}
func (*GeoIP_Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func init() {
	proto1.RegisterType((*GeoIP)(nil), "proto.GeoIP")
	proto1.RegisterType((*GeoIP_IP)(nil), "proto.GeoIP.IP")
	proto1.RegisterType((*GeoIP_Name)(nil), "proto.GeoIP.Name")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for GeoIPService service

type GeoIPServiceClient interface {
	QueryCountry(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error)
	QuerySubdivision(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error)
	QueryCity(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error)
}

type geoIPServiceClient struct {
	cc *grpc.ClientConn
}

func NewGeoIPServiceClient(cc *grpc.ClientConn) GeoIPServiceClient {
	return &geoIPServiceClient{cc}
}

func (c *geoIPServiceClient) QueryCountry(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error) {
	out := new(GeoIP_Name)
	err := grpc.Invoke(ctx, "/proto.GeoIPService/QueryCountry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoIPServiceClient) QuerySubdivision(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error) {
	out := new(GeoIP_Name)
	err := grpc.Invoke(ctx, "/proto.GeoIPService/QuerySubdivision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoIPServiceClient) QueryCity(ctx context.Context, in *GeoIP_IP, opts ...grpc.CallOption) (*GeoIP_Name, error) {
	out := new(GeoIP_Name)
	err := grpc.Invoke(ctx, "/proto.GeoIPService/QueryCity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GeoIPService service

type GeoIPServiceServer interface {
	QueryCountry(context.Context, *GeoIP_IP) (*GeoIP_Name, error)
	QuerySubdivision(context.Context, *GeoIP_IP) (*GeoIP_Name, error)
	QueryCity(context.Context, *GeoIP_IP) (*GeoIP_Name, error)
}

func RegisterGeoIPServiceServer(s *grpc.Server, srv GeoIPServiceServer) {
	s.RegisterService(&_GeoIPService_serviceDesc, srv)
}

func _GeoIPService_QueryCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoIP_IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoIPServiceServer).QueryCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GeoIPService/QueryCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoIPServiceServer).QueryCountry(ctx, req.(*GeoIP_IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoIPService_QuerySubdivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoIP_IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoIPServiceServer).QuerySubdivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GeoIPService/QuerySubdivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoIPServiceServer).QuerySubdivision(ctx, req.(*GeoIP_IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoIPService_QueryCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoIP_IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoIPServiceServer).QueryCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GeoIPService/QueryCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoIPServiceServer).QueryCity(ctx, req.(*GeoIP_IP))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeoIPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GeoIPService",
	HandlerType: (*GeoIPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCountry",
			Handler:    _GeoIPService_QueryCountry_Handler,
		},
		{
			MethodName: "QuerySubdivision",
			Handler:    _GeoIPService_QuerySubdivision_Handler,
		},
		{
			MethodName: "QueryCity",
			Handler:    _GeoIPService_QueryCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("geoip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4f, 0xcd, 0xcf,
	0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xfa, 0x5c, 0xac, 0xee,
	0xa9, 0xf9, 0x9e, 0x01, 0x52, 0x02, 0x5c, 0x4c, 0x9e, 0x01, 0x42, 0x5c, 0x5c, 0x4c, 0x99, 0x05,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x52, 0x22, 0x5c, 0x2c, 0x7e, 0x89, 0xb9, 0xa9, 0x42, 0x3c,
	0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x10, 0x51, 0xa3, 0xd5, 0x8c, 0x5c, 0x3c, 0x60, 0x1d, 0xc1,
	0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x46, 0x5c, 0x3c, 0x81, 0xa5, 0xa9, 0x45, 0x95, 0xce,
	0xf9, 0xa5, 0x79, 0x25, 0x45, 0x95, 0x42, 0xfc, 0x10, 0x0b, 0xf4, 0xc0, 0x8a, 0xf4, 0x3c, 0x03,
	0xa4, 0x04, 0x51, 0x04, 0xc0, 0x46, 0x9a, 0x71, 0x09, 0x80, 0xf5, 0x04, 0x97, 0x26, 0xa5, 0x64,
	0x96, 0x65, 0x16, 0x67, 0xe6, 0xe7, 0x11, 0xa5, 0x4f, 0x9f, 0x8b, 0x13, 0x62, 0x57, 0x66, 0x09,
	0x51, 0x16, 0x25, 0xb1, 0x81, 0x45, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xd2, 0x25,
	0xcd, 0xfb, 0x00, 0x00, 0x00,
}
